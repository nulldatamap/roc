procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.10 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.10;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Json.18 #Derived.6;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Json.20 #Derived_gen.15;
    let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.14 #Derived.9;
    ret #Derived_gen.13;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName Json.118 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.115 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
    ret Encode.115;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.117 : List U8 = CallByName Json.118 Encode.99 Encode.101 Encode.107;
    ret Encode.117;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.120 : List U8 = CallByName Json.102 Encode.99 Encode.101 Encode.107;
    ret Encode.120;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.483 : {} = Struct {};
    ret Json.483;

procedure Json.102 (Json.103, Json.556, Json.101):
    let Json.565 : I64 = 34i64;
    let Json.564 : U8 = CallByName Num.127 Json.565;
    let Json.562 : List U8 = CallByName List.4 Json.103 Json.564;
    let Json.563 : List U8 = CallByName Str.12 Json.101;
    let Json.559 : List U8 = CallByName List.8 Json.562 Json.563;
    let Json.561 : I64 = 34i64;
    let Json.560 : U8 = CallByName Num.127 Json.561;
    let Json.558 : List U8 = CallByName List.4 Json.559 Json.560;
    ret Json.558;

procedure Json.118 (Json.119, Json.486, Json.117):
    let Json.519 : I64 = 123i64;
    let Json.518 : U8 = CallByName Num.127 Json.519;
    let Json.121 : List U8 = CallByName List.4 Json.119 Json.518;
    let Json.517 : U64 = CallByName List.6 Json.117;
    let Json.494 : {List U8, U64} = Struct {Json.121, Json.517};
    let Json.495 : {} = Struct {};
    let Json.493 : {List U8, U64} = CallByName List.18 Json.117 Json.494 Json.495;
    let Json.123 : List U8 = StructAtIndex 0 Json.493;
    let Json.492 : I64 = 125i64;
    let Json.491 : U8 = CallByName Num.127 Json.492;
    let Json.490 : List U8 = CallByName List.4 Json.123 Json.491;
    ret Json.490;

procedure Json.118 (Json.119, Json.486, Json.117):
    let Json.553 : I64 = 123i64;
    let Json.552 : U8 = CallByName Num.127 Json.553;
    let Json.121 : List U8 = CallByName List.4 Json.119 Json.552;
    let Json.551 : U64 = CallByName List.6 Json.117;
    let Json.528 : {List U8, U64} = Struct {Json.121, Json.551};
    let Json.529 : {} = Struct {};
    let Json.527 : {List U8, U64} = CallByName List.18 Json.117 Json.528 Json.529;
    let Json.123 : List U8 = StructAtIndex 0 Json.527;
    let Json.526 : I64 = 125i64;
    let Json.525 : U8 = CallByName Num.127 Json.526;
    let Json.524 : List U8 = CallByName List.4 Json.123 Json.525;
    ret Json.524;

procedure Json.120 (Json.488, Json.489):
    let Json.126 : Str = StructAtIndex 0 Json.489;
    let Json.127 : Str = StructAtIndex 1 Json.489;
    let Json.124 : List U8 = StructAtIndex 0 Json.488;
    let Json.125 : U64 = StructAtIndex 1 Json.488;
    let Json.516 : I64 = 34i64;
    let Json.515 : U8 = CallByName Num.127 Json.516;
    let Json.513 : List U8 = CallByName List.4 Json.124 Json.515;
    let Json.514 : List U8 = CallByName Str.12 Json.126;
    let Json.510 : List U8 = CallByName List.8 Json.513 Json.514;
    let Json.512 : I64 = 34i64;
    let Json.511 : U8 = CallByName Num.127 Json.512;
    let Json.507 : List U8 = CallByName List.4 Json.510 Json.511;
    let Json.509 : I64 = 58i64;
    let Json.508 : U8 = CallByName Num.127 Json.509;
    let Json.505 : List U8 = CallByName List.4 Json.507 Json.508;
    let Json.506 : {} = Struct {};
    let Json.128 : List U8 = CallByName Encode.24 Json.505 Json.127 Json.506;
    joinpoint Json.500 Json.129:
        let Json.498 : U64 = 1i64;
        let Json.497 : U64 = CallByName Num.20 Json.125 Json.498;
        let Json.496 : {List U8, U64} = Struct {Json.129, Json.497};
        ret Json.496;
    in
    let Json.504 : U64 = 1i64;
    let Json.501 : Int1 = CallByName Num.24 Json.125 Json.504;
    if Json.501 then
        let Json.503 : I64 = 44i64;
        let Json.502 : U8 = CallByName Num.127 Json.503;
        let Json.499 : List U8 = CallByName List.4 Json.128 Json.502;
        jump Json.500 Json.499;
    else
        jump Json.500 Json.128;

procedure Json.120 (Json.488, Json.489):
    let Json.126 : Str = StructAtIndex 0 Json.489;
    let Json.127 : Str = StructAtIndex 1 Json.489;
    let Json.124 : List U8 = StructAtIndex 0 Json.488;
    let Json.125 : U64 = StructAtIndex 1 Json.488;
    let Json.550 : I64 = 34i64;
    let Json.549 : U8 = CallByName Num.127 Json.550;
    let Json.547 : List U8 = CallByName List.4 Json.124 Json.549;
    let Json.548 : List U8 = CallByName Str.12 Json.126;
    let Json.544 : List U8 = CallByName List.8 Json.547 Json.548;
    let Json.546 : I64 = 34i64;
    let Json.545 : U8 = CallByName Num.127 Json.546;
    let Json.541 : List U8 = CallByName List.4 Json.544 Json.545;
    let Json.543 : I64 = 58i64;
    let Json.542 : U8 = CallByName Num.127 Json.543;
    let Json.539 : List U8 = CallByName List.4 Json.541 Json.542;
    let Json.540 : {} = Struct {};
    let Json.128 : List U8 = CallByName Encode.24 Json.539 Json.127 Json.540;
    joinpoint Json.534 Json.129:
        let Json.532 : U64 = 1i64;
        let Json.531 : U64 = CallByName Num.20 Json.125 Json.532;
        let Json.530 : {List U8, U64} = Struct {Json.129, Json.531};
        ret Json.530;
    in
    let Json.538 : U64 = 1i64;
    let Json.535 : Int1 = CallByName Num.24 Json.125 Json.538;
    if Json.535 then
        let Json.537 : I64 = 44i64;
        let Json.536 : U8 = CallByName Num.127 Json.537;
        let Json.533 : List U8 = CallByName List.4 Json.128 Json.536;
        jump Json.534 Json.533;
    else
        jump Json.534 Json.128;

procedure Json.18 (Json.101):
    let Json.554 : Str = CallByName Encode.23 Json.101;
    ret Json.554;

procedure Json.20 (Json.117):
    let Json.484 : List {Str, Str} = CallByName Encode.23 Json.117;
    ret Json.484;

procedure Json.20 (Json.117):
    let Json.520 : List {Str, Str} = CallByName Encode.23 Json.117;
    ret Json.520;

procedure List.139 (List.140, List.141, List.138):
    let List.534 : {List U8, U64} = CallByName Json.120 List.140 List.141;
    ret List.534;

procedure List.139 (List.140, List.141, List.138):
    let List.582 : {List U8, U64} = CallByName Json.120 List.140 List.141;
    ret List.582;

procedure List.18 (List.136, List.137, List.138):
    let List.515 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.515;

procedure List.18 (List.136, List.137, List.138):
    let List.563 : {List U8, U64} = CallByName List.92 List.136 List.137 List.138;
    ret List.563;

procedure List.4 (List.107, List.108):
    let List.562 : U64 = 1i64;
    let List.561 : List U8 = CallByName List.70 List.107 List.562;
    let List.560 : List U8 = CallByName List.71 List.561 List.108;
    ret List.560;

procedure List.6 (#Attr.2):
    let List.494 : U64 = lowlevel ListLen #Attr.2;
    ret List.494;

procedure List.6 (#Attr.2):
    let List.536 : U64 = lowlevel ListLen #Attr.2;
    ret List.536;

procedure List.6 (#Attr.2):
    let List.585 : U64 = lowlevel ListLen #Attr.2;
    ret List.585;

procedure List.66 (#Attr.2, #Attr.3):
    let List.531 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.531;

procedure List.66 (#Attr.2, #Attr.3):
    let List.579 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.579;

procedure List.70 (#Attr.2, #Attr.3):
    let List.541 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.541;

procedure List.71 (#Attr.2, #Attr.3):
    let List.539 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.539;

procedure List.8 (#Attr.2, #Attr.3):
    let List.584 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.584;

procedure List.80 (#Derived_gen.30, #Derived_gen.31, #Derived_gen.32, #Derived_gen.33, #Derived_gen.34):
    joinpoint List.521 List.433 List.434 List.435 List.436 List.437:
        let List.523 : Int1 = CallByName Num.22 List.436 List.437;
        if List.523 then
            let List.530 : {Str, Str} = CallByName List.66 List.433 List.436;
            inc List.530;
            let List.524 : {List U8, U64} = CallByName List.139 List.434 List.530 List.435;
            let List.527 : U64 = 1i64;
            let List.526 : U64 = CallByName Num.19 List.436 List.527;
            jump List.521 List.433 List.524 List.435 List.526 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.521 #Derived_gen.30 #Derived_gen.31 #Derived_gen.32 #Derived_gen.33 #Derived_gen.34;

procedure List.80 (#Derived_gen.41, #Derived_gen.42, #Derived_gen.43, #Derived_gen.44, #Derived_gen.45):
    joinpoint List.569 List.433 List.434 List.435 List.436 List.437:
        let List.571 : Int1 = CallByName Num.22 List.436 List.437;
        if List.571 then
            let List.578 : {Str, Str} = CallByName List.66 List.433 List.436;
            inc List.578;
            let List.572 : {List U8, U64} = CallByName List.139 List.434 List.578 List.435;
            let List.575 : U64 = 1i64;
            let List.574 : U64 = CallByName Num.19 List.436 List.575;
            jump List.569 List.433 List.572 List.435 List.574 List.437;
        else
            dec List.433;
            ret List.434;
    in
    jump List.569 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43 #Derived_gen.44 #Derived_gen.45;

procedure List.92 (List.430, List.431, List.432):
    let List.519 : U64 = 0i64;
    let List.520 : U64 = CallByName List.6 List.430;
    let List.518 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.519 List.520;
    ret List.518;

procedure List.92 (List.430, List.431, List.432):
    let List.567 : U64 = 0i64;
    let List.568 : U64 = CallByName List.6 List.430;
    let List.566 : {List U8, U64} = CallByName List.80 List.430 List.431 List.432 List.567 List.568;
    ret List.566;

procedure Num.127 (#Attr.2):
    let Num.298 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.298;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.301;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.302 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.300;

procedure Str.12 (#Attr.2):
    let Str.310 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.310;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.307 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.307;

procedure Str.9 (Str.79):
    let Str.305 : U64 = 0i64;
    let Str.306 : U64 = CallByName List.6 Str.79;
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.48 Str.79 Str.305 Str.306;
    let Str.302 : Int1 = StructAtIndex 2 Str.80;
    if Str.302 then
        let Str.304 : Str = StructAtIndex 1 Str.80;
        let Str.303 : [C {U64, U8}, C Str] = TagId(1) Str.304;
        ret Str.303;
    else
        let Str.300 : U8 = StructAtIndex 3 Str.80;
        let Str.301 : U64 = StructAtIndex 0 Str.80;
        let #Derived_gen.20 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.20;
        let Str.299 : {U64, U8} = Struct {Str.301, Str.300};
        let Str.298 : [C {U64, U8}, C Str] = TagId(0) Str.299;
        ret Str.298;

procedure Test.0 ():
    let Test.12 : Str = "bar";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.26 Test.12 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
